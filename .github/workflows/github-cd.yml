name: Publish Clamify-API to Kubernetes
#on:
#  release:
#    types: [published]

on:
  push:
    branches: ["CLAM-12_Setup_DO_Kubernetes_Deploy"]

env:
  DOTNET_VERSION: '6.0.302' # The .NET SDK version to use

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dependencies
      run: dotnet restore

    - name: Run Build (Fail on Linter Warnings)
      run: dotnet build /warnaserror

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    needs: build
    steps:
      - name: check out the repo
        uses: actions/checkout@v2
      
      - name: Run Unit and Integration Tests
        run: dotnet test clamify-api.sln

  push_to_registry:
    name: Push Docker image to GitHub Packages
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: check out the repo
        uses: actions/checkout@v2

      - name: version dockerfile
        run: sed -i 's/v0.0.0/v${{ github.run_number }}/g' Dockerfile

      - name: set up Docker builder
        uses: docker/setup-buildx-action@v1

      - name: log into GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: push to Github Container Registry
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ghcr.io/cdconn00/clamify-api:v${{ github.run_number }}
            ghcr.io/cdconn00/clamify-api:latest

  deploy:
    name: deploy to kube cluster
    needs: push_to_registry
    runs-on: ubuntu-latest
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.KUBE_CONTEXT }}

      - name: Deploy to DigitalOcean Kubernetes
        run: kubectl apply -f $kubernetes/deployment.yml

      - name: Verify deployment0a
        run: kubectl rollout status deployment/clamify-api
